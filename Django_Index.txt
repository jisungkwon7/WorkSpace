
A Django Project is collection of applications and configuration
when combined together will make up the full web application.
Web Framework: Django witll be able to inject content into the HTML
Can use Python code to inject content from a database.

-- Django Level One --

 - activate DjangoEnv
 - django-admin startproject first_project
 - python manage.py startapp first_app
 - python manage.py runserver



first_app
 migrations : directory stores database specific information as it related to the models
 __init__.py : Blanck Python script, treating as a package
 admin.py : can register the models here/ then use them with Django's admin interface.
 apps.py : can place application specific configuration
 models.py : store application's data models
 tests.py : store functions & test applictaion
 views.py : handles requests and return response
first_project
 __init__.py : Blanck Python script, treating as a package
 settings.py : Storing all of the project settings
 urls.py : Storing all the URL patters of the project/ Different pages of the web application
 wsgi.py : Acting as the Web Server Gateway Interface/ help deplying the web app to production
manage.py : associateing with many commands.
static
 images
 
templates
 first_app
  index.html



Class:Django_Application(very direct mapping from the views.py to the urls.py)
 project/settings.py 
  INSTALLED_APPS - string application/ what we need to do is adding own application
 app/views.py
  . from django.shortcuts import render
  . from django.http import HttpResponse   => import http modulse
  .
  . def index(request):
  .	return HttpResponse("Hello World!")  => HttpResponse the Hello World/ pass to HTML
 project/ulrs.py ->mapping app views
  . from django.conf.urls import url
  . from django.contrib import admin
  . form first_app import views
  .
  . urlpatterns = [
  . 	url(r'^$',views.index,name='index'),
  .	url(r'^admin/', admin.site.urls),

Class:URL_Mappings(include()function from django.onf.urls)
->the include() function allows to look for a match with regular expresions 
->and link back to application's own ulrs.py file. Make url pattern
 project/ulrs.py -mapping app views
  . from django.conf.urls import url
  . from django.contrib import admin
  . from django.conf.urls import include
  . form first_app import views
  .
  . urlpatterns = [
  . 	url(r'^$',views.index,name='index'),
  .	url(r'^first_app/',include(first_app.urls)),
  .	url(r'^admin/', admin.site.urls),

 app/ulrs.py -mapping app views
  . from django.conf.urls import url
  . form first_app import views
  .
  . urlpatterns = [
  .	url(r'^admin/', admin.site.urls),

Class:Tamplates(how to connect templates with models so can display data created dynamically.
-> do not have to 'hard-coded' path
 project/settings.py
  . BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file)))
  . TEMPLATE_DIR = os.path.join(BASE_DIR,"templates")

  . TEMPLATES = [
  . 	{
  .		'DIRS':[TEMPLATE_DIR,],
                 ....
  .	}
  .]
 template/index.html
 project/settings.py 
  INSTALLED_APPS - string application/ what we need to do is adding own application
 project/views.py
  . from django.shortcuts import render
  . from django.http import HttpResponse   => import http modulse
  .
  . def index(request):
  .     my_dict = {'insert_me':"Hello I am from views.py!"}
  .     return render(request,'first_app/index.html',context=my_dict)

Class: Static files
project/settings.py
  . BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
  . TEMPLATE_DIR = os.path.join(BASE_DIR,"templates")
  . STATIC_DIR = os.path.join(BASE_DIR,"static")

  . STATIC_URL = '/static/'
  . STATICFILES_DIRS = [
  . 	STATIC_DIR,
  . ]
templates/first_app/index.html
  . <!DOCTYPE html>
  . {% load staticfiles %}     => load image
  . <html>
  . ...
  . <head>
  . ...
  . <link rel="stylesheet" href="{% static "css/mystyle.css" %}"/>    => load css
  . ...
  . </head>
  . ...
  . <body>
  . ...
  . <img src"{%static "images/babypic.jpg" %}" alt="Uh Oh, did not show">
  . ...
  . </body>
  . </html>


-- Django Level Two --
Class: Creating Models
app
 models.py
  . from django.db import models
  . 
  . class Topic(models.Model):
  .     top_name = models.CharField(max_lenght=264,unique=True)
  . 
  .     def __str__(self):
  .         return self.top_name
  . 
  . class Webpage(models.Model):
  .     topic = models.ForeignKey(Topic)
  .     name = models.CharField(max_lenght=264,unique=True)
  .     url = models.URLField(unique=True)
  . 
  .     def __str__(self):
  .         return self.name
  . 
  . class AccessRecord(models.Model):
  .     name = models.ForeignKey(Webpage)
  .     date = models.DateField()
  . 
  .     def __str__(self):
  .         return str(self.date)

 - python manage.py migrate
 - python manage.py makemigrations first_app
 - python manage.py migrate
     => connected to SQLdatabase.
 - python manage.py shell => test whether connected or not
 >>> from first_app.models import Topic
 >>> print(Topic.objects.all())
 >>> t = Topic(top_name="Social Network")
 >>> t.save()
 >>> print(Topic.objects.all())
 >>> quit()

app
 admin.py
  . from django.contrib import admin
  . from first_app.models import AccessRecord,Topic,Webpage
  . 
  . admin.site.register(AccessRecord)
  . admin.site.register(Topic)
  . admin.site.register(Webpage)

 - python manage.py createsuperuser

Class: Population Script
 - pip install Faker

populate_first_app.py
  . import os
  . os.environ.setdefault('DJANGO_SETTINGS_MODULE','first_project.settings')
  . 
  . import django
  . django.setup()
  . 
  . ## FAKE POP SCRIPT
  . import random
  . from first_app.models import AccessRecord,Webpage,Topic
  . from faker import Faker
   . 
   . fakegen =Faker()
   . topic = ['Search','Social','Marketplace','News','Games']
   . 
   . def add_topic():
   .     t = Topic.objects.get_or_create(top_name=random.choice(topic))[0]
   .     t.save()
   .     return t
  . 
  . def populate(N=5):
  . 
  .     for entry in range(N):
  .         # get the topic for the entry
  .         top=add_topic()
  . 
  .         #Create the fakedate for that entry
  .         fake_url =fakegen.url()
  .         fake_date = fakegen.date()
  .         fake_name = fakegen.company()
  . 
  .         # Create the new webpage entry
  .         webpg = Webpage.objects.get_or_create(topic=top,url=fake_url,name=fake_name)[0]
  . 
  .         # create a fake access record for that Webpage
  .         acc_rec = AccessRecord.objects.get_or_create(name=webpg,date=fake_date)[0]
  . 
  . if __name__ == '__main__':
  .     print("population script!")
  .     populate(20)
  .     print("populating complete!")

 - python populate_first_app.py
    => check webpage

Class: Models-Templates-Views Paradigm
->Models, views, and templates serve dynamic contents to a 
->user based on them
 1.First: Views.py-import any modes 
 2.Second: Use the views to query the model for data
 3.Third: Pass results from the models to the template
 4.Fourth:Edidt template so that it is ready to accept and display the data from the model
 5.Fith: Map a URL to the view

app/views.py
  . from django.shortcuts import render
  . from django.http import HttpResponse
  . from first_app.models import Topic,Webpage,AccessRecord
  . 
  . def index(request):
  .     webpages_list = AccessRecord.objects.order_by('date')
  .     date_dict = {'access_records':webpages_list}
  .     return render(request,'first_app/index.html',context=date_dict)
templates/first_app/index.html
 . <!DOCTYPE html>
 . {% load staticfiles %}
 . <html lang="en">
 .   <head>
 .     <meta charset="UTF-8">
 .     <meta name="viewport" content="width=device-width, initial-scale=1.0">
 .     <meta http-equiv="X-UA-Compatible" content="ie=edge">
 .     <title>Django Level Two</title>
 .     <link rel="stylesheet" href="{% static "css/mystyle.css" %}"/>
 .   </head>
 .   <body>
 .     <hi>Hi welcom to Django Level two!</hi>
 .     <h2>Here are your acces records:</h2>
 . 
 .     <div class="djangtwo">
 .       {% if access_records %}
 .         <table>
 .           <thead>
 .             <th>Site Name</th>
 .             <th>Date Accessed</th>
 .           </thead>
 .           {% for acc in access_records %}
 .           <tr>
 .             <td>{{ acc.name }}</td>
 .             <td>{{ acc.date }}</td>
 .           </tr>
 .           {% endfor %}
 .         </table>
 .         {% else %}
 .           <p>NO ACCESS RECORDS FOUND!</p>
 .         {% endif %}
 .     </div>
 . 
 .   </body>
 . </html>
 static/css/mystyle.css
 . h1{
 .   color: red;
 . }
 . table, th, td{
 .   border: 2px solid black
 . } 












